// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(CUSTOMER)
  phone         String?
  lineId        String?   @unique
  platform      Platform  @default(WEB)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  consultations Consultation[]
  prescriptions Prescription[]
  medicalProfile MedicalProfile?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

enum Role {
  CUSTOMER
  ADMIN
  DOCTOR
  NURSE
  PHARMACIST
}

enum Platform {
  WEB
  LINE
}

// Medical Professional Profile
model MedicalProfile {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  licenseNumber   String    @unique
  licenseType     LicenseType
  specialization  String?
  workplace       String
  workplaceAddress String
  graduatedFrom   String
  graduationYear  Int
  certificationUrl String   // URL to uploaded certification document
  verificationStatus VerificationStatus @default(PENDING)
  isAvailable     Boolean   @default(false)
  verifiedAt      DateTime?
  verifiedBy      String?   // Admin user ID who verified the profile
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("medical_profiles")
}

enum LicenseType {
  DOCTOR
  NURSE
  PHARMACIST
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Product Management
model Product {
  id            String    @id @default(cuid())
  name          String
  description   String
  price         Float
  stock         Int
  imageUrl      String?
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  requiresPrescription Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orderItems    OrderItem[]

  @@map("products")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]

  @@map("categories")
}

// Order Management
model Order {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  shippingFee   Float
  address       Address   @relation(fields: [addressId], references: [id])
  addressId     String
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orderItems    OrderItem[]
  prescription  Prescription?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  PROMPT_PAY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

// Address Management
model Address {
  id          String  @id @default(cuid())
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  address     String
  district    String
  province    String
  postalCode  String
  isDefault   Boolean @default(false)
  orders      Order[]

  @@map("addresses")
}

// Prescription Management
model Prescription {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String    @unique
  imageUrl    String
  status      PrescriptionStatus @default(PENDING)
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("prescriptions")
}

enum PrescriptionStatus {
  PENDING
  APPROVED
  REJECTED
}

// Consultation Management
model Consultation {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  pharmacistId String
  status      ConsultationStatus @default(PENDING)
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  messages    Message[]

  @@map("consultations")
}

model Message {
  id              String    @id @default(cuid())
  consultation    Consultation @relation(fields: [consultationId], references: [id])
  consultationId  String
  senderId        String
  content         String
  createdAt       DateTime  @default(now())

  @@map("messages")
}

enum ConsultationStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

// NextAuth.js models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}